Jan-06-2023 14:16:32 [info] {"message":"text info"}
Jan-06-2023 14:16:32 [warn] {"message":"text warn"}
Jan-06-2023 14:16:32 [error] {"message":"text error"}
Jan-06-2023 14:17:41 [info] {"message":"text info"}
Jan-06-2023 14:17:41 [warn] {"message":"text warn"}
Jan-06-2023 14:17:41 [error] {"message":"text error"}
Jan-06-2023 14:27:35 [info] {"message":"text info"}
Jan-06-2023 14:27:35 [warn] {"message":"text warn"}
Jan-06-2023 14:27:35 [error] {"message":"text error"}
Jan-06-2023 15:47:39 [info] {"message":"text info"}
Jan-06-2023 15:47:39 [warn] {"message":"text warn"}
Jan-06-2023 15:47:39 [error] {"message":"text error"}
Jan-09-2023 14:59:07 [info] {"message":"text info"}
Jan-09-2023 14:59:07 [warn] {"message":"text warn"}
Jan-09-2023 14:59:07 [error] {"message":"text error"}
Jan-09-2023 15:02:15 [info] {"message":"localhost:3000/userSignUp - POST - ::1"}
Jan-09-2023 15:03:33 [info] {"message":"localhost:3000/userSignUp - POST - ::1"}
Jan-09-2023 15:04:04 [info] {"message":"localhost:3000/userSignUp - POST - ::1"}
Jan-09-2023 15:05:35 [info] {"message":"localhost:3000/signup - POST - ::1"}
Jan-06-2023 17:24:18 [info] {"message":"text info"}
Jan-06-2023 17:24:18 [warn] {"message":"text warn"}
Jan-06-2023 17:24:18 [error] {"message":"text error"}
Jan-06-2023 17:27:09 [info] {"message":"text info"}
Jan-06-2023 17:27:09 [warn] {"message":"text warn"}
Jan-06-2023 17:27:09 [error] {"message":"text error"}
Jan-06-2023 17:28:46 [info] {"message":"text info"}
Jan-06-2023 17:28:46 [warn] {"message":"text warn"}
Jan-06-2023 17:28:46 [error] {"message":"text error"}
Jan-06-2023 17:53:29 [info] {"message":"text info"}
Jan-06-2023 17:53:29 [warn] {"message":"text warn"}
Jan-06-2023 17:53:29 [error] {"message":"text error"}
Jan-07-2023 11:19:12 [info] {"message":"text info"}
Jan-07-2023 11:19:12 [warn] {"message":"text warn"}
Jan-07-2023 11:19:12 [error] {"message":"text error"}
Jan-07-2023 11:38:16 [info] {"message":"text info"}
Jan-07-2023 11:38:16 [warn] {"message":"text warn"}
Jan-07-2023 11:38:16 [error] {"message":"text error"}
Jan-07-2023 11:39:06 [info] {"message":"text info"}
Jan-07-2023 11:39:06 [warn] {"message":"text warn"}
Jan-07-2023 11:39:06 [error] {"message":"text error"}
Jan-07-2023 11:48:57 [info] {"message":"text info"}
Jan-07-2023 11:48:57 [warn] {"message":"text warn"}
Jan-07-2023 11:48:57 [error] {"message":"text error"}
Jan-07-2023 11:50:29 [info] {"message":"text info"}
Jan-07-2023 11:50:29 [warn] {"message":"text warn"}
Jan-07-2023 11:50:29 [error] {"message":"text error"}
Jan-07-2023 11:51:51 [info] {"message":"text info"}
Jan-07-2023 11:51:51 [warn] {"message":"text warn"}
Jan-07-2023 11:51:51 [error] {"message":"text error"}
Jan-07-2023 11:53:52 [info] {"message":"text info"}
Jan-07-2023 11:53:52 [warn] {"message":"text warn"}
Jan-07-2023 11:53:52 [error] {"message":"text error"}
Jan-07-2023 11:58:25 [info] {"message":"text info"}
Jan-07-2023 11:58:25 [warn] {"message":"text warn"}
Jan-07-2023 11:58:25 [error] {"message":"text error"}
Jan-07-2023 12:00:41 [info] {"message":"text info"}
Jan-07-2023 12:00:41 [warn] {"message":"text warn"}
Jan-07-2023 12:00:41 [error] {"message":"text error"}
Jan-07-2023 21:23:54 [info] {"message":"text info"}
Jan-07-2023 21:23:54 [warn] {"message":"text warn"}
Jan-07-2023 21:23:54 [error] {"message":"text error"}
Jan-07-2023 21:24:42 [info] {"message":"text info"}
Jan-07-2023 21:24:42 [warn] {"message":"text warn"}
Jan-07-2023 21:24:42 [error] {"message":"text error"}
Jan-07-2023 21:26:17 [info] {"message":"text info"}
Jan-07-2023 21:26:17 [warn] {"message":"text warn"}
Jan-07-2023 21:26:17 [error] {"message":"text error"}
Jan-07-2023 21:29:08 [info] {"message":"text info"}
Jan-07-2023 21:29:08 [warn] {"message":"text warn"}
Jan-07-2023 21:29:08 [error] {"message":"text error"}
Jan-07-2023 21:47:11 [info] {"message":"text info"}
Jan-07-2023 21:47:11 [warn] {"message":"text warn"}
Jan-07-2023 21:47:11 [error] {"message":"text error"}
Jan-07-2023 21:49:12 [info] {"message":"text info"}
Jan-07-2023 21:49:12 [warn] {"message":"text warn"}
Jan-07-2023 21:49:12 [error] {"message":"text error"}
Jan-07-2023 21:50:48 [info] {"message":"text info"}
Jan-07-2023 21:50:48 [warn] {"message":"text warn"}
Jan-07-2023 21:50:48 [error] {"message":"text error"}
Jan-08-2023 19:36:44 [info] {"message":"text info"}
Jan-08-2023 19:36:44 [warn] {"message":"text warn"}
Jan-08-2023 19:36:44 [error] {"message":"text error"}
Jan-08-2023 19:46:28 [info] {"message":"text info"}
Jan-08-2023 19:46:28 [warn] {"message":"text warn"}
Jan-08-2023 19:46:28 [error] {"message":"text error"}
Jan-08-2023 20:54:34 [info] {"message":"text info"}
Jan-08-2023 20:54:34 [warn] {"message":"text warn"}
Jan-08-2023 20:54:34 [error] {"message":"text error"}
Jan-08-2023 20:58:15 [info] {"message":"text info"}
Jan-08-2023 20:58:15 [warn] {"message":"text warn"}
Jan-08-2023 20:58:15 [error] {"message":"text error"}
Jan-08-2023 20:58:58 [info] {"message":"text info"}
Jan-08-2023 20:58:58 [warn] {"message":"text warn"}
Jan-08-2023 20:58:58 [error] {"message":"text error"}
Jan-08-2023 21:00:02 [info] {"message":"text info"}
Jan-08-2023 21:00:02 [warn] {"message":"text warn"}
Jan-08-2023 21:00:02 [error] {"message":"text error"}
Jan-08-2023 21:06:15 [info] {"message":"text info"}
Jan-08-2023 21:06:15 [warn] {"message":"text warn"}
Jan-08-2023 21:06:15 [error] {"message":"text error"}
Jan-08-2023 21:07:38 [info] {"message":"text info"}
Jan-08-2023 21:07:38 [warn] {"message":"text warn"}
Jan-08-2023 21:07:38 [error] {"message":"text error"}
Jan-08-2023 21:08:26 [info] {"message":"text info"}
Jan-08-2023 21:08:26 [warn] {"message":"text warn"}
Jan-08-2023 21:08:26 [error] {"message":"text error"}
Jan-08-2023 21:09:44 [info] {"message":"text info"}
Jan-08-2023 21:09:44 [warn] {"message":"text warn"}
Jan-08-2023 21:09:44 [error] {"message":"text error"}
Jan-08-2023 21:20:18 [info] {"message":"text info"}
Jan-08-2023 21:20:18 [warn] {"message":"text warn"}
Jan-08-2023 21:20:18 [error] {"message":"text error"}
Jan-08-2023 21:21:22 [info] {"message":"text info"}
Jan-08-2023 21:21:22 [warn] {"message":"text warn"}
Jan-08-2023 21:21:22 [error] {"message":"text error"}
Jan-08-2023 21:23:25 [info] {"message":"text info"}
Jan-08-2023 21:23:25 [warn] {"message":"text warn"}
Jan-08-2023 21:23:25 [error] {"message":"text error"}
Jan-08-2023 21:25:45 [info] {"message":"text info"}
Jan-08-2023 21:25:45 [warn] {"message":"text warn"}
Jan-08-2023 21:25:45 [error] {"message":"text error"}
Jan-08-2023 21:38:53 [info] {"message":"text info"}
Jan-08-2023 21:38:53 [warn] {"message":"text warn"}
Jan-08-2023 21:38:53 [error] {"message":"text error"}
Jan-08-2023 21:41:55 [info] {"message":"text info"}
Jan-08-2023 21:41:55 [warn] {"message":"text warn"}
Jan-08-2023 21:41:55 [error] {"message":"text error"}
Jan-08-2023 21:44:01 [info] {"message":"text info"}
Jan-08-2023 21:44:01 [warn] {"message":"text warn"}
Jan-08-2023 21:44:01 [error] {"message":"text error"}
Jan-08-2023 21:59:39 [info] {"message":"text info"}
Jan-08-2023 21:59:39 [warn] {"message":"text warn"}
Jan-08-2023 21:59:39 [error] {"message":"text error"}
Jan-08-2023 22:00:43 [info] {"message":"text info"}
Jan-08-2023 22:00:43 [warn] {"message":"text warn"}
Jan-08-2023 22:00:43 [error] {"message":"text error"}
Jan-08-2023 22:01:15 [info] {"message":"text info"}
Jan-08-2023 22:01:15 [warn] {"message":"text warn"}
Jan-08-2023 22:01:15 [error] {"message":"text error"}
Jan-08-2023 22:01:44 [info] {"message":"text info"}
Jan-08-2023 22:01:44 [warn] {"message":"text warn"}
Jan-08-2023 22:01:44 [error] {"message":"text error"}
Jan-08-2023 22:02:21 [info] {"message":"text info"}
Jan-08-2023 22:02:21 [warn] {"message":"text warn"}
Jan-08-2023 22:02:21 [error] {"message":"text error"}
Jan-08-2023 22:02:40 [info] {"message":"text info"}
Jan-08-2023 22:02:40 [warn] {"message":"text warn"}
Jan-08-2023 22:02:40 [error] {"message":"text error"}
Jan-08-2023 22:04:25 [info] {"message":"text info"}
Jan-08-2023 22:04:25 [warn] {"message":"text warn"}
Jan-08-2023 22:04:25 [error] {"message":"text error"}
Jan-08-2023 22:24:30 [info] {"message":"text info"}
Jan-08-2023 22:24:30 [warn] {"message":"text warn"}
Jan-08-2023 22:24:30 [error] {"message":"text error"}
Jan-08-2023 22:33:41 [info] {"message":"text info"}
Jan-08-2023 22:33:41 [warn] {"message":"text warn"}
Jan-08-2023 22:33:41 [error] {"message":"text error"}
Jan-08-2023 22:36:29 [info] {"message":"text info"}
Jan-08-2023 22:36:29 [warn] {"message":"text warn"}
Jan-08-2023 22:36:29 [error] {"message":"text error"}
Jan-08-2023 22:37:57 [info] {"message":"text info"}
Jan-08-2023 22:37:57 [warn] {"message":"text warn"}
Jan-08-2023 22:37:57 [error] {"message":"text error"}
Jan-08-2023 22:40:23 [info] {"message":"text info"}
Jan-08-2023 22:40:23 [warn] {"message":"text warn"}
Jan-08-2023 22:40:23 [error] {"message":"text error"}
Jan-08-2023 22:55:33 [info] {"message":"text info"}
Jan-08-2023 22:55:33 [warn] {"message":"text warn"}
Jan-08-2023 22:55:33 [error] {"message":"text error"}
Jan-08-2023 22:56:01 [info] {"message":"text info"}
Jan-08-2023 22:56:01 [warn] {"message":"text warn"}
Jan-08-2023 22:56:01 [error] {"message":"text error"}
Jan-08-2023 22:57:31 [info] {"message":"text info"}
Jan-08-2023 22:57:31 [warn] {"message":"text warn"}
Jan-08-2023 22:57:31 [error] {"message":"text error"}
Jan-08-2023 22:58:58 [info] {"message":"text info"}
Jan-08-2023 22:58:58 [warn] {"message":"text warn"}
Jan-08-2023 22:58:58 [error] {"message":"text error"}
Jan-08-2023 23:01:27 [info] {"message":"text info"}
Jan-08-2023 23:01:27 [warn] {"message":"text warn"}
Jan-08-2023 23:01:27 [error] {"message":"text error"}
Jan-08-2023 23:04:21 [info] {"message":"text info"}
Jan-08-2023 23:04:21 [warn] {"message":"text warn"}
Jan-08-2023 23:04:21 [error] {"message":"text error"}
Jan-08-2023 23:06:28 [info] {"message":"text info"}
Jan-08-2023 23:06:28 [warn] {"message":"text warn"}
Jan-08-2023 23:06:28 [error] {"message":"text error"}
Jan-08-2023 23:09:11 [info] {"message":"text info"}
Jan-08-2023 23:09:11 [warn] {"message":"text warn"}
Jan-08-2023 23:09:11 [error] {"message":"text error"}
Jan-08-2023 23:13:01 [info] {"message":"text info"}
Jan-08-2023 23:13:01 [warn] {"message":"text warn"}
Jan-08-2023 23:13:01 [error] {"message":"text error"}
Jan-08-2023 23:14:07 [info] {"message":"text info"}
Jan-08-2023 23:14:07 [warn] {"message":"text warn"}
Jan-08-2023 23:14:07 [error] {"message":"text error"}
Jan-08-2023 23:18:24 [info] {"message":"text info"}
Jan-08-2023 23:18:24 [warn] {"message":"text warn"}
Jan-08-2023 23:18:24 [error] {"message":"text error"}
Jan-08-2023 23:18:55 [info] {"message":"text info"}
Jan-08-2023 23:18:55 [warn] {"message":"text warn"}
Jan-08-2023 23:18:55 [error] {"message":"text error"}
Jan-09-2023 00:19:05 [info] {"message":"text info"}
Jan-09-2023 00:19:05 [warn] {"message":"text warn"}
Jan-09-2023 00:19:05 [error] {"message":"text error"}
Jan-09-2023 00:23:48 [info] {"message":"text info"}
Jan-09-2023 00:23:48 [warn] {"message":"text warn"}
Jan-09-2023 00:23:48 [error] {"message":"text error"}
Jan-09-2023 00:33:08 [info] {"message":"text info"}
Jan-09-2023 00:33:08 [warn] {"message":"text warn"}
Jan-09-2023 00:33:08 [error] {"message":"text error"}
Jan-09-2023 00:44:55 [info] {"message":"text info"}
Jan-09-2023 00:44:55 [warn] {"message":"text warn"}
Jan-09-2023 00:44:55 [error] {"message":"text error"}
Jan-09-2023 00:46:21 [info] {"message":"text info"}
Jan-09-2023 00:46:21 [warn] {"message":"text warn"}
Jan-09-2023 00:46:21 [error] {"message":"text error"}
Jan-09-2023 00:47:22 [info] {"message":"text info"}
Jan-09-2023 00:47:22 [warn] {"message":"text warn"}
Jan-09-2023 00:47:22 [error] {"message":"text error"}
Jan-09-2023 00:48:15 [info] {"message":"text info"}
Jan-09-2023 00:48:15 [warn] {"message":"text warn"}
Jan-09-2023 00:48:15 [error] {"message":"text error"}
Jan-09-2023 00:49:34 [info] {"message":"text info"}
Jan-09-2023 00:49:34 [warn] {"message":"text warn"}
Jan-09-2023 00:49:34 [error] {"message":"text error"}
Jan-09-2023 00:50:23 [info] {"message":"text info"}
Jan-09-2023 00:50:23 [warn] {"message":"text warn"}
Jan-09-2023 00:50:23 [error] {"message":"text error"}
Jan-09-2023 00:58:03 [info] {"message":"text info"}
Jan-09-2023 00:58:03 [warn] {"message":"text warn"}
Jan-09-2023 00:58:03 [error] {"message":"text error"}
Jan-09-2023 01:01:56 [info] {"message":"text info"}
Jan-09-2023 01:01:56 [warn] {"message":"text warn"}
Jan-09-2023 01:01:56 [error] {"message":"text error"}
Jan-09-2023 01:04:06 [info] {"message":"text info"}
Jan-09-2023 01:04:06 [warn] {"message":"text warn"}
Jan-09-2023 01:04:06 [error] {"message":"text error"}
Jan-09-2023 01:07:49 [info] {"message":"text info"}
Jan-09-2023 01:07:49 [warn] {"message":"text warn"}
Jan-09-2023 01:07:49 [error] {"message":"text error"}
Jan-09-2023 01:08:36 [info] {"message":"text info"}
Jan-09-2023 01:08:36 [warn] {"message":"text warn"}
Jan-09-2023 01:08:36 [error] {"message":"text error"}
Jan-09-2023 01:51:31 [info] {"message":"text info"}
Jan-09-2023 01:51:31 [warn] {"message":"text warn"}
Jan-09-2023 01:51:31 [error] {"message":"text error"}
Jan-09-2023 11:20:28 [info] {"message":"text info"}
Jan-09-2023 11:20:28 [warn] {"message":"text warn"}
Jan-09-2023 11:20:28 [error] {"message":"text error"}
Jan-09-2023 17:26:10 [info] {"message":"text info"}
Jan-09-2023 17:26:10 [warn] {"message":"text warn"}
Jan-09-2023 17:26:10 [error] {"message":"text error"}
Jan-09-2023 17:29:19 [info] {"message":"text info"}
Jan-09-2023 17:29:19 [warn] {"message":"text warn"}
Jan-09-2023 17:29:19 [error] {"message":"text error"}
Jan-09-2023 17:34:45 [info] {"message":"text info"}
Jan-09-2023 17:34:45 [warn] {"message":"text warn"}
Jan-09-2023 17:34:45 [error] {"message":"text error"}
Jan-09-2023 17:36:29 [info] {"message":"text info"}
Jan-09-2023 17:36:29 [warn] {"message":"text warn"}
Jan-09-2023 17:36:29 [error] {"message":"text error"}
Jan-09-2023 17:40:23 [info] {"message":"text info"}
Jan-09-2023 17:40:23 [warn] {"message":"text warn"}
Jan-09-2023 17:40:23 [error] {"message":"text error"}
Jan-09-2023 17:41:53 [info] {"message":"text info"}
Jan-09-2023 17:41:53 [warn] {"message":"text warn"}
Jan-09-2023 17:41:53 [error] {"message":"text error"}
Jan-09-2023 17:44:56 [info] {"message":"text info"}
Jan-09-2023 17:44:56 [warn] {"message":"text warn"}
Jan-09-2023 17:44:56 [error] {"message":"text error"}
Jan-09-2023 17:50:06 [info] {"message":"text info"}
Jan-09-2023 17:50:06 [warn] {"message":"text warn"}
Jan-09-2023 17:50:06 [error] {"message":"text error"}
Jan-09-2023 17:52:01 [info] {"message":"text info"}
Jan-09-2023 17:52:01 [warn] {"message":"text warn"}
Jan-09-2023 17:52:01 [error] {"message":"text error"}
Jan-09-2023 17:53:53 [info] {"message":"text info"}
Jan-09-2023 17:53:53 [warn] {"message":"text warn"}
Jan-09-2023 17:53:53 [error] {"message":"text error"}
Jan-09-2023 17:54:42 [info] {"message":"text info"}
Jan-09-2023 17:54:42 [warn] {"message":"text warn"}
Jan-09-2023 17:54:42 [error] {"message":"text error"}
Jan-09-2023 17:56:15 [info] {"message":"text info"}
Jan-09-2023 17:56:15 [warn] {"message":"text warn"}
Jan-09-2023 17:56:15 [error] {"message":"text error"}
Jan-09-2023 17:56:43 [info] {"message":"text info"}
Jan-09-2023 17:56:43 [warn] {"message":"text warn"}
Jan-09-2023 17:56:43 [error] {"message":"text error"}
Jan-09-2023 17:57:22 [info] {"message":"text info"}
Jan-09-2023 17:57:22 [warn] {"message":"text warn"}
Jan-09-2023 17:57:22 [error] {"message":"text error"}
Jan-09-2023 18:01:13 [info] {"message":"text info"}
Jan-09-2023 18:01:13 [warn] {"message":"text warn"}
Jan-09-2023 18:01:13 [error] {"message":"text error"}
Jan-09-2023 18:02:26 [info] {"message":"text info"}
Jan-09-2023 18:02:26 [warn] {"message":"text warn"}
Jan-09-2023 18:02:26 [error] {"message":"text error"}
Jan-09-2023 18:04:18 [info] {"message":"text info"}
Jan-09-2023 18:04:18 [warn] {"message":"text warn"}
Jan-09-2023 18:04:18 [error] {"message":"text error"}
Jan-09-2023 18:05:28 [info] {"message":"text info"}
Jan-09-2023 18:05:28 [warn] {"message":"text warn"}
Jan-09-2023 18:05:28 [error] {"message":"text error"}
Jan-09-2023 18:06:06 [info] {"message":"text info"}
Jan-09-2023 18:06:06 [warn] {"message":"text warn"}
Jan-09-2023 18:06:06 [error] {"message":"text error"}
Jan-09-2023 18:09:22 [info] {"message":"text info"}
Jan-09-2023 18:09:22 [warn] {"message":"text warn"}
Jan-09-2023 18:09:22 [error] {"message":"text error"}
Jan-09-2023 18:11:22 [info] {"message":"text info"}
Jan-09-2023 18:11:22 [warn] {"message":"text warn"}
Jan-09-2023 18:11:22 [error] {"message":"text error"}
Jan-09-2023 18:11:56 [info] {"message":"text info"}
Jan-09-2023 18:11:56 [warn] {"message":"text warn"}
Jan-09-2023 18:11:56 [error] {"message":"text error"}
Jan-09-2023 18:13:31 [info] {"message":"text info"}
Jan-09-2023 18:13:31 [warn] {"message":"text warn"}
Jan-09-2023 18:13:31 [error] {"message":"text error"}
Jan-09-2023 18:16:21 [info] {"message":"text info"}
Jan-09-2023 18:16:21 [warn] {"message":"text warn"}
Jan-09-2023 18:16:21 [error] {"message":"text error"}
Jan-09-2023 18:16:23 [info] {"message":"text info"}
Jan-09-2023 18:16:23 [warn] {"message":"text warn"}
Jan-09-2023 18:16:23 [error] {"message":"text error"}
Jan-09-2023 18:16:34 [info] {"message":"text info"}
Jan-09-2023 18:16:34 [warn] {"message":"text warn"}
Jan-09-2023 18:16:34 [error] {"message":"text error"}
Jan-10-2023 09:59:51 [info] {"message":"text info"}
Jan-10-2023 09:59:51 [warn] {"message":"text warn"}
Jan-10-2023 09:59:51 [error] {"message":"text error"}
Jan-10-2023 10:07:27 [info] {"message":"text info"}
Jan-10-2023 10:07:27 [warn] {"message":"text warn"}
Jan-10-2023 10:07:27 [error] {"message":"text error"}
Jan-10-2023 10:13:38 [info] {"message":"text info"}
Jan-10-2023 10:13:38 [warn] {"message":"text warn"}
Jan-10-2023 10:13:38 [error] {"message":"text error"}
Jan-10-2023 10:15:10 [info] {"message":"text info"}
Jan-10-2023 10:15:10 [warn] {"message":"text warn"}
Jan-10-2023 10:15:10 [error] {"message":"text error"}
Jan-10-2023 10:16:43 [info] {"message":"text info"}
Jan-10-2023 10:16:43 [warn] {"message":"text warn"}
Jan-10-2023 10:16:43 [error] {"message":"text error"}
Jan-10-2023 10:19:05 [info] {"message":"text info"}
Jan-10-2023 10:19:05 [warn] {"message":"text warn"}
Jan-10-2023 10:19:05 [error] {"message":"text error"}
Jan-10-2023 10:22:31 [info] {"message":"text info"}
Jan-10-2023 10:22:31 [warn] {"message":"text warn"}
Jan-10-2023 10:22:31 [error] {"message":"text error"}
Jan-10-2023 10:24:30 [info] {"message":"text info"}
Jan-10-2023 10:24:30 [warn] {"message":"text warn"}
Jan-10-2023 10:24:30 [error] {"message":"text error"}
Jan-10-2023 10:25:56 [info] {"message":"text info"}
Jan-10-2023 10:25:56 [warn] {"message":"text warn"}
Jan-10-2023 10:25:56 [error] {"message":"text error"}
Jan-10-2023 10:28:08 [info] {"message":"text info"}
Jan-10-2023 10:28:08 [warn] {"message":"text warn"}
Jan-10-2023 10:28:08 [error] {"message":"text error"}
Jan-10-2023 10:28:54 [info] {"message":"text info"}
Jan-10-2023 10:28:54 [warn] {"message":"text warn"}
Jan-10-2023 10:28:54 [error] {"message":"text error"}
Jan-10-2023 10:29:48 [info] {"message":"text info"}
Jan-10-2023 10:29:48 [warn] {"message":"text warn"}
Jan-10-2023 10:29:48 [error] {"message":"text error"}
Jan-10-2023 10:30:19 [info] {"message":"text info"}
Jan-10-2023 10:30:19 [warn] {"message":"text warn"}
Jan-10-2023 10:30:19 [error] {"message":"text error"}
Jan-10-2023 10:32:13 [info] {"message":"text info"}
Jan-10-2023 10:32:13 [warn] {"message":"text warn"}
Jan-10-2023 10:32:13 [error] {"message":"text error"}
Jan-10-2023 10:44:00 [info] {"message":"text info"}
Jan-10-2023 10:44:00 [warn] {"message":"text warn"}
Jan-10-2023 10:44:00 [error] {"message":"text error"}
Jan-10-2023 10:51:51 [info] {"message":"text info"}
Jan-10-2023 10:51:51 [warn] {"message":"text warn"}
Jan-10-2023 10:51:51 [error] {"message":"text error"}
Jan-10-2023 10:54:17 [info] {"message":"text info"}
Jan-10-2023 10:54:17 [warn] {"message":"text warn"}
Jan-10-2023 10:54:17 [error] {"message":"text error"}
Jan-10-2023 11:00:59 [info] {"message":"text info"}
Jan-10-2023 11:00:59 [warn] {"message":"text warn"}
Jan-10-2023 11:00:59 [error] {"message":"text error"}
Jan-10-2023 11:02:32 [info] {"message":"text info"}
Jan-10-2023 11:02:32 [warn] {"message":"text warn"}
Jan-10-2023 11:02:32 [error] {"message":"text error"}
Jan-10-2023 11:12:06 [info] {"message":"text info"}
Jan-10-2023 11:12:06 [warn] {"message":"text warn"}
Jan-10-2023 11:12:06 [error] {"message":"text error"}
Jan-10-2023 11:14:41 [info] {"message":"text info"}
Jan-10-2023 11:14:41 [warn] {"message":"text warn"}
Jan-10-2023 11:14:41 [error] {"message":"text error"}
Jan-10-2023 11:19:00 [info] {"message":"text info"}
Jan-10-2023 11:19:00 [warn] {"message":"text warn"}
Jan-10-2023 11:19:00 [error] {"message":"text error"}
Jan-10-2023 11:20:05 [info] {"message":"text info"}
Jan-10-2023 11:20:05 [warn] {"message":"text warn"}
Jan-10-2023 11:20:05 [error] {"message":"text error"}
Jan-10-2023 11:20:28 [info] {"message":"text info"}
Jan-10-2023 11:20:28 [warn] {"message":"text warn"}
Jan-10-2023 11:20:28 [error] {"message":"text error"}
Jan-10-2023 11:21:53 [info] {"message":"text info"}
Jan-10-2023 11:21:53 [warn] {"message":"text warn"}
Jan-10-2023 11:21:53 [error] {"message":"text error"}
Jan-10-2023 11:29:11 [info] {"message":"text info"}
Jan-10-2023 11:29:11 [warn] {"message":"text warn"}
Jan-10-2023 11:29:11 [error] {"message":"text error"}
Jan-10-2023 11:32:02 [info] {"message":"text info"}
Jan-10-2023 11:32:02 [warn] {"message":"text warn"}
Jan-10-2023 11:32:02 [error] {"message":"text error"}
Jan-10-2023 11:34:30 [info] {"message":"text info"}
Jan-10-2023 11:34:30 [warn] {"message":"text warn"}
Jan-10-2023 11:34:30 [error] {"message":"text error"}
Jan-10-2023 11:37:57 [info] {"message":"text info"}
Jan-10-2023 11:37:57 [warn] {"message":"text warn"}
Jan-10-2023 11:37:57 [error] {"message":"text error"}
Jan-11-2023 12:00:20 [info] {"message":"localhost:3000/api/seller/forgetPassword - POST - ::1"}
Jan-11-2023 12:06:30 [info] {"message":"localhost:3000/api/seller/forgetPassword - POST - ::1"}
Jan-11-2023 12:07:37 [info] {"message":"localhost:3000/api/seller/forgetPassword - POST - ::1"}
Jan-11-2023 12:11:22 [info] {"message":"localhost:3000/api/seller/forgetPassword - POST - ::1"}
Jan-11-2023 14:49:54 [info] {"message":"localhost:3000/api/sller/forgetPasswordFunc - POST - ::1"}
Jan-12-2023 11:57:13 [info] {"message":"localhost:3000/api/sellerr/verifyChangedOtp - POST - ::1"}
Jan-13-2023 20:42:09 [error] {"message":"400 - Unexpected token } in JSON at position 14"}
Jan-13-2023 20:42:09 [error] {"message":"400 - Unexpected token } in JSON at position 14"}
Jan-16-2023 15:07:12 [error] {"message":"400 - Unexpected token \n in JSON at position 33"}
Jan-16-2023 15:07:12 [error] {"message":"400 - Unexpected token \n in JSON at position 33"}
Jan-17-2023 15:50:44 [info] http://localhost:3000/api/seller/signup - POST METHOD  
Jan-17-2023 15:50:44 [error] Error: {reference: validationMiddleware, message: name is required, errorCode: 412, errors: [], error: name is required} 
Jan-17-2023 15:50:49 [info] http://localhost:3000/api/seller/signup - POST METHOD  
Jan-17-2023 15:50:57 [info] http://localhost:3000/api/seller/signin - POST METHOD  
Jan-17-2023 15:50:57 [error] Error: {reference: validationMiddleware, message: password is required, errorCode: 412, errors: [], error: password is required} 
Jan-17-2023 15:51:02 [info] http://localhost:3000/api/seller/signin - POST METHOD  
Jan-17-2023 15:51:10 [info] http://localhost:3000/api/seller/changePassword - POST METHOD  
Jan-17-2023 15:51:10 [error] Error: {reference: changePassword, message: Current Password Incorrect, errorCode: 401, errors: [], error: Current Password Incorrect} 
Jan-17-2023 15:51:15 [info] http://localhost:3000/api/seller/changePassword - POST METHOD  
<<<<<<< HEAD
Jan-18-2023 10:02:28 [info] http://localhost:3000/api/product/create - POST METHOD  
Jan-18-2023 10:02:29 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: AppError is not a constructor} 
Jan-18-2023 10:03:02 [info] http://localhost:3000/api/product/create - POST METHOD  
Jan-18-2023 10:03:03 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 10:14:06 [info] http://localhost:3000/api/product/getAllProducts?productPrice=50 - GET METHOD  
Jan-18-2023 10:16:45 [info] http://localhost:3000/api/product/getAllProducts?productPrice=50 - GET METHOD  
Jan-18-2023 10:16:45 [error] Error: {reference: GET /product/getAllProduct, message: Server Error!, errorCode: 500, errors: [], error: sortedProducts is not defined} 
Jan-18-2023 10:17:56 [info] http://localhost:3000/api/product/getAllProducts?productPrice=50 - GET METHOD  
Jan-18-2023 10:18:20 [info] http://localhost:3000/api/product/create - POST METHOD  
Jan-18-2023 10:18:21 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 10:19:49 [info] http://localhost:3000/api/seller/signin - POST METHOD  
Jan-18-2023 10:19:49 [error] Error: {reference: signin, message: Seller not found, errorCode: 404, errors: [], error: Seller not found} 
Jan-18-2023 10:24:28 [info] http://localhost:3000/api/seller/signin - POST METHOD  
Jan-18-2023 10:24:28 [error] Error: {reference: signin, message: Seller not found, errorCode: 404, errors: [], error: Seller not found} 
Jan-18-2023 10:24:41 [info] http://localhost:3000/api/seller/signup - POST METHOD  
Jan-18-2023 10:24:47 [info] http://localhost:3000/api/seller/signin - POST METHOD  
Jan-18-2023 10:25:29 [info] http://localhost:3000/api/product/create - POST METHOD  
Jan-18-2023 10:25:30 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 10:26:38 [info] http://localhost:3000/api/product/create - POST METHOD  
Jan-18-2023 10:26:40 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 10:27:27 [info] http://localhost:3000/api/product/create - POST METHOD  
Jan-18-2023 10:27:28 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 10:28:37 [info] http://localhost:3000/api/product/create - POST METHOD  
Jan-18-2023 10:28:38 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 10:32:17 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 10:32:18 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 10:33:37 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 10:33:38 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 10:34:42 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 10:34:43 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 10:35:39 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 10:35:40 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 10:35:55 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-18-2023 10:36:18 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 10:36:19 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 10:36:33 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 10:36:34 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 10:41:34 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 10:41:35 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 10:42:03 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 10:42:05 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 10:42:58 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 10:42:59 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 10:56:36 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 10:56:37 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 10:57:06 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 10:57:08 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 10:57:48 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 10:57:50 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 10:58:03 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 10:58:04 [error] Error: {reference: token is missing, message: 403, errorCode: 500, errors: [], error: 403} 
Jan-18-2023 10:59:14 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 10:59:15 [error] Error: {reference: token is missing, message: 403, errorCode: 500, errors: [], error: 403} 
Jan-18-2023 10:59:20 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 10:59:21 [error] Error: {reference: token invalid, message: 401, errorCode: 500, errors: [], error: 401} 
Jan-18-2023 11:03:57 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 11:03:58 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of null (reading '_id')} 
Jan-18-2023 11:04:51 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 11:04:53 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of null (reading '_id')} 
Jan-18-2023 11:07:29 [info] http://localhost:5001/api/seller/signup - POST METHOD  
Jan-18-2023 11:07:29 [error] Error: {reference: signup, message: Seller already exists, errorCode: 409, errors: [], error: Seller already exists} 
Jan-18-2023 11:07:35 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 11:07:37 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of null (reading '_id')} 
Jan-18-2023 11:08:36 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 11:08:38 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of null (reading '_id')} 
Jan-18-2023 11:09:51 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 11:09:53 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of null (reading '_id')} 
Jan-18-2023 11:12:34 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 11:13:08 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 11:13:09 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of null (reading '_id')} 
Jan-18-2023 11:15:20 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 11:15:22 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of null (reading '_id')} 
Jan-18-2023 11:15:49 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 11:15:50 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of null (reading '_id')} 
Jan-18-2023 11:20:15 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 11:20:17 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of null (reading '_id')} 
Jan-18-2023 11:20:46 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 11:20:48 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: sellerSchema.findOne is not a function} 
Jan-18-2023 11:21:22 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 11:21:24 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of null (reading '_id')} 
Jan-18-2023 11:22:31 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 11:40:20 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 11:42:14 [info] http://localhost:5001/api/product/getAllProducts?productPrice=50 - GET METHOD  
Jan-18-2023 11:42:25 [info] http://localhost:5001/api/product/getAllProducts?productPrice=507878 - GET METHOD  
Jan-18-2023 11:42:25 [error] Error: {reference: not found, message: 404, errorCode: 500, errors: [], error: 404} 
Jan-18-2023 11:42:45 [info] http://localhost:5001/api/product/getAllProducts - GET METHOD  
Jan-18-2023 11:48:59 [info] http://localhost:5001/api/seller/signup - POST METHOD  
Jan-18-2023 11:48:59 [error] Error: {reference: signup, message: Seller already exists, errorCode: 409, errors: [], error: Seller already exists} 
Jan-18-2023 11:49:09 [info] http://localhost:5001/api/seller/signup - POST METHOD  
Jan-18-2023 11:49:09 [error] Error: {reference: validationMiddleware, message: email is required, errorCode: 412, errors: [], error: email is required} 
Jan-18-2023 11:50:55 [info] http://localhost:5001/api/product/getAllProducts?productPrice=507878 - GET METHOD  
Jan-18-2023 11:50:55 [error] Error: {reference: GET /product/getAllProduct, message: Server Error!, errorCode: 500, errors: [], error: reference is not defined} 
Jan-18-2023 11:52:10 [info] http://localhost:5001/api/product/getAllProducts?productPrice=507878 - GET METHOD  
Jan-18-2023 11:52:10 [error] Error: {reference: getAllProducts, message: not found, errorCode: 404, errors: [], error: not found} 
Jan-18-2023 11:54:33 [info] http://localhost:5001/api/product/update/63c67955b8a15a8a8a3a7250 - PUT METHOD  
Jan-18-2023 11:54:48 [info] http://localhost:5001/api/product/update/63c67955b8a15a8a8a3a7276 - PUT METHOD  
Jan-18-2023 11:54:48 [error] Error: {reference: update, message: Provide valid ProductId, errorCode: 400, errors: [], error: Provide valid ProductId} 
Jan-18-2023 11:55:54 [info] http://localhost:5001/api/product/delete/63c67955b8a15a8a8a3a7250 - DELETE METHOD  
Jan-18-2023 11:56:02 [info] http://localhost:5001/api/product/delete/63c67955b8a15a8a8a3a7250 - DELETE METHOD  
Jan-18-2023 11:56:02 [error] Error: {reference: Product already Deleted, message: 400, errorCode: 500, errors: [], error: 400} 
Jan-18-2023 11:56:09 [info] http://localhost:5001/api/product/update/63c67955b8a15a8a8a3a7250 - PUT METHOD  
Jan-18-2023 11:56:09 [error] Error: {reference: update, message: No products with this Id or might be deleted, errorCode: 404, errors: [], error: No products with this Id or might be deleted} 
Jan-18-2023 11:56:47 [info] http://localhost:5001/api/product/update/63c67955b8a15a8a8a3a7250 - PUT METHOD  
Jan-18-2023 11:56:47 [error] Error: {reference: update, message: No products with this Id or might be deleted, errorCode: 404, errors: [], error: No products with this Id or might be deleted} 
Jan-18-2023 11:56:52 [info] http://localhost:5001/api/product/delete/63c67955b8a15a8a8a3a7250 - DELETE METHOD  
Jan-18-2023 11:56:52 [error] Error: {reference: delete, message: Product already Deleted, errorCode: 400, errors: [], error: Product already Deleted} 
Jan-18-2023 11:57:06 [info] http://localhost:5001/api/product/delete/63c67955b8a15a8a8a3a7250 - DELETE METHOD  
Jan-18-2023 11:57:06 [error] Error: {reference: delete, message: Product already Deleted, errorCode: 400, errors: [], error: Product already Deleted} 
Jan-18-2023 11:57:46 [info] http://localhost:5001/api/product/delete/63c67955b8a15a8a8a3a7250 - DELETE METHOD  
Jan-18-2023 11:57:46 [error] Error: {reference: delete, message: Product already Deleted, errorCode: 400, errors: [], error: Product already Deleted} 
Jan-18-2023 12:12:17 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 12:12:19 [error] Error: {reference: validationMiddleware, message: productImage is required, errorCode: 412, errors: [], error: productImage is required} 
Jan-18-2023 12:13:28 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 12:13:30 [error] Error: {reference: validationMiddleware, message: productImage is required, errorCode: 412, errors: [], error: productImage is required} 
Jan-18-2023 12:15:21 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 12:16:25 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 12:16:25 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: Unexpected field} 
Jan-18-2023 12:19:45 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 12:19:45 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: Unexpected field} 
Jan-18-2023 12:19:53 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 12:22:09 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 12:22:11 [error] Error: {reference: validationMiddleware, message: productImage is required, errorCode: 412, errors: [], error: productImage is required} 
Jan-18-2023 12:22:26 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 12:28:28 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 12:29:15 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 12:30:06 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 12:30:07 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: r is not defined} 
Jan-18-2023 12:30:37 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 12:31:46 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 12:32:53 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 12:33:33 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 12:33:35 [error] Error: {reference: validationMiddleware, message: description is required, errorCode: 412, errors: [], error: description is required} 
Jan-18-2023 13:09:24 [info] http://localhost:5001/api/user/signup - POST METHOD  
Jan-18-2023 13:09:24 [error] Error: {reference: validationMiddleware, message: email must be a valid email, errorCode: 412, errors: [], error: email must be a valid email} 
Jan-18-2023 13:09:35 [info] http://localhost:5001/api/user/signup - POST METHOD  
Jan-18-2023 13:09:35 [error] Error: {reference: validationMiddleware, message: password with value Kh77 fails to match the required pattern: /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$/, errorCode: 412, errors: [], error: password with value Kh77 fails to match the required pattern: /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$/} 
Jan-18-2023 13:09:57 [info] http://localhost:5001/api/user/signup - POST METHOD  
Jan-18-2023 13:09:57 [error] Error: {reference: validationMiddleware, message: name length must be at least 2 characters long, errorCode: 412, errors: [], error: name length must be at least 2 characters long} 
Jan-18-2023 13:10:06 [info] http://localhost:5001/api/user/signup - POST METHOD  
Jan-18-2023 13:10:06 [error] Error: {reference: validationMiddleware, message: password with value Khus4tt77 fails to match the required pattern: /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$/, errorCode: 412, errors: [], error: password with value Khus4tt77 fails to match the required pattern: /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$/} 
Jan-18-2023 13:10:20 [info] http://localhost:5001/api/user/signup - POST METHOD  
Jan-18-2023 13:22:26 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 15:23:15 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 15:23:16 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of null (reading '_id')} 
Jan-18-2023 15:23:47 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 16:11:00 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 16:11:01 [error] Error: {reference: authentic, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-18-2023 16:11:14 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-18-2023 16:11:14 [error] Error: {reference: POST /seller/signin, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of undefined (reading 'findOne')} 
Jan-18-2023 16:11:43 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-18-2023 16:11:43 [error] Error: {reference: POST /seller/signin, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of undefined (reading 'findOne')} 
Jan-18-2023 16:12:28 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-18-2023 16:12:28 [error] Error: {reference: POST /seller/signin, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of undefined (reading 'findOne')} 
Jan-18-2023 16:13:30 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-18-2023 16:13:30 [error] Error: {reference: signin, message: Seller not found, errorCode: 404, errors: [], error: Seller not found} 
Jan-18-2023 16:13:36 [info] http://localhost:5001/api/seller/signup - POST METHOD  
Jan-18-2023 16:13:36 [error] Error: {reference: POST /seller/signup, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of undefined (reading 'create')} 
Jan-18-2023 16:19:11 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 16:19:12 [error] Error: {reference: authentic, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-18-2023 16:19:17 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-18-2023 16:19:17 [error] Error: {reference: signin, message: Seller not found, errorCode: 404, errors: [], error: Seller not found} 
Jan-18-2023 16:19:21 [info] http://localhost:5001/api/seller/signup - POST METHOD  
Jan-18-2023 16:19:21 [error] Error: {reference: POST /seller/signup, message: Server Error!, errorCode: 500, errors: {"otp":{"name":"ValidatorError","message":"Path `otp` is required.","properties":{"message":"Path `otp` is required.","type":"required","path":"otp"},"kind":"required","path":"otp"}}, error: otpSeller validation failed: otp: Path `otp` is required.} 
Jan-18-2023 16:19:30 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-18-2023 16:19:30 [error] Error: {reference: signin, message: Seller not found, errorCode: 404, errors: [], error: Seller not found} 
Jan-18-2023 16:19:32 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-18-2023 16:19:32 [error] Error: {reference: signin, message: Seller not found, errorCode: 404, errors: [], error: Seller not found} 
Jan-18-2023 16:19:32 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-18-2023 16:19:32 [error] Error: {reference: signin, message: Seller not found, errorCode: 404, errors: [], error: Seller not found} 
Jan-18-2023 16:19:52 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-18-2023 16:19:52 [error] Error: {reference: POST /seller/signin, message: Server Error!, errorCode: 500, errors: [], error: sellerSchema.findOne is not a function} 
Jan-18-2023 16:19:56 [info] http://localhost:5001/api/seller/signup - POST METHOD  
Jan-18-2023 16:19:56 [error] Error: {reference: POST /seller/signup, message: Server Error!, errorCode: 500, errors: [], error: sellerSchema.findOne is not a function} 
Jan-18-2023 16:19:57 [info] http://localhost:5001/api/seller/signup - POST METHOD  
Jan-18-2023 16:19:57 [error] Error: {reference: POST /seller/signup, message: Server Error!, errorCode: 500, errors: [], error: sellerSchema.findOne is not a function} 
Jan-18-2023 16:56:51 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 16:56:53 [error] Error: {reference: authentic, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-18-2023 16:56:58 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-18-2023 16:56:58 [error] Error: {reference: POST /seller/signin, message: Server Error!, errorCode: 500, errors: [], error: sellerSchema.findOne is not a function} 
Jan-18-2023 16:57:03 [info] http://localhost:5001/api/seller/signup - POST METHOD  
Jan-18-2023 16:57:03 [error] Error: {reference: POST /seller/signup, message: Server Error!, errorCode: 500, errors: [], error: sellerSchema.findOne is not a function} 
Jan-18-2023 16:58:21 [info] http://localhost:5001/api/seller/signup - POST METHOD  
Jan-18-2023 16:58:21 [error] Error: {reference: POST /seller/signup, message: Server Error!, errorCode: 500, errors: [], error: sellerSchema.findOne is not a function} 
Jan-18-2023 17:03:10 [info] http://localhost:5001/api/seller/signup - POST METHOD  
Jan-18-2023 17:03:11 [error] Error: {reference: signup, message: Seller already exists, errorCode: 409, errors: [], error: Seller already exists} 
Jan-18-2023 17:03:15 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-18-2023 17:03:26 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:03:28 [error] Error: {reference: authentic, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-18-2023 17:03:36 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:03:37 [error] Error: {reference: authentic, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-18-2023 17:03:52 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:03:53 [error] Error: {reference: authentic, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-18-2023 17:04:43 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:04:44 [error] Error: {reference: authentic, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-18-2023 17:06:29 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:06:31 [error] Error: {reference: authentic, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-18-2023 17:06:55 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:06:56 [error] Error: {reference: authentic, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-18-2023 17:07:18 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:07:20 [error] Error: {reference: authentic, message: token is missing, errorCode: 403, errors: [], error: token is missing} 
Jan-18-2023 17:07:37 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:07:39 [error] Error: {reference: authentic, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-18-2023 17:08:32 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:08:34 [error] Error: {reference: authentic, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-18-2023 17:09:05 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:09:06 [error] Error: {reference: authentic, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-18-2023 17:11:39 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:11:41 [error] Error: {reference: authentic, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-18-2023 17:21:27 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:21:28 [error] Error: {reference: authentic, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-18-2023 17:23:57 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:23:59 [error] Error: {reference: authentic, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-18-2023 17:25:03 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:25:05 [error] Error: {reference: authentic, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-18-2023 17:26:41 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:26:43 [error] Error: {reference: authentic, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-18-2023 17:30:56 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:30:57 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of undefined (reading 'email')} 
Jan-18-2023 17:32:02 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:32:04 [error] Error: {reference: authentic, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-18-2023 17:35:35 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-18-2023 17:36:27 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-18-2023 17:36:49 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:36:50 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of null (reading '_id')} 
Jan-18-2023 17:37:48 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:37:49 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of null (reading '_id')} 
Jan-18-2023 17:44:29 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:47:06 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-18-2023 17:55:09 [info] http://localhost:5001/api/product/update/63c67955b8a15a8a8a3a7250 - PUT METHOD  
Jan-18-2023 17:55:09 [error] Error: {reference: update, message: No products with this Id or might be deleted, errorCode: 404, errors: [], error: No products with this Id or might be deleted} 
Jan-18-2023 17:55:46 [info] http://localhost:5001/api/product/update/63c67955b8a15a8a8a3a7250 - PUT METHOD  
Jan-18-2023 17:56:46 [info] http://localhost:5001/api/product/delete/63c67955b8a15a8a8a3a7250 - DELETE METHOD  
Jan-18-2023 17:57:51 [info] http://localhost:5001/api/product/delete/63c67955b8a15a8a8a3a7250 - DELETE METHOD  
Jan-18-2023 17:57:51 [error] Error: {reference: delete, message: Product already Deleted, errorCode: 400, errors: [], error: Product already Deleted} 
Jan-18-2023 17:57:56 [info] http://localhost:5001/api/product/getAllProducts?productPrice=507878 - GET METHOD  
Jan-18-2023 17:57:56 [error] Error: {reference: GET /product/getAllProduct, message: Server Error!, errorCode: 500, errors: [], error: allProduct is not defined} 
Jan-18-2023 17:58:03 [info] http://localhost:5001/api/product/getAllProducts?productPrice=50 - GET METHOD  
Jan-18-2023 17:58:03 [error] Error: {reference: GET /product/getAllProduct, message: Server Error!, errorCode: 500, errors: [], error: allProduct is not defined} 
Jan-18-2023 17:59:21 [info] http://localhost:5001/api/product/getAllProducts?productPrice=50 - GET METHOD  
Jan-18-2023 17:59:21 [error] Error: {reference: GET /product/getAllProduct, message: Server Error!, errorCode: 500, errors: [], error: allProduct(...).sort is not a function} 
Jan-18-2023 17:59:23 [info] http://localhost:5001/api/product/getAllProducts?productPrice=50 - GET METHOD  
Jan-18-2023 17:59:23 [error] Error: {reference: GET /product/getAllProduct, message: Server Error!, errorCode: 500, errors: [], error: allProduct(...).sort is not a function} 
Jan-18-2023 18:00:01 [info] http://localhost:5001/api/product/getAllProducts?productPrice=50 - GET METHOD  
Jan-18-2023 18:00:01 [error] Error: {reference: GET /product/getAllProduct, message: Server Error!, errorCode: 500, errors: [], error: allProduct(...).sort is not a function} 
Jan-18-2023 18:00:05 [info] http://localhost:5001/api/product/getAllProducts - GET METHOD  
Jan-18-2023 18:00:05 [error] Error: {reference: GET /product/getAllProduct, message: Server Error!, errorCode: 500, errors: [], error: allProduct(...).sort is not a function} 
Jan-18-2023 18:02:42 [info] http://localhost:5001/api/product/getAllProducts?productPrice=50 - GET METHOD  
Jan-18-2023 18:02:54 [info] http://localhost:5001/api/product/getAllProducts - GET METHOD  
Jan-19-2023 10:05:58 [info] http://localhost:5001/api/product/getAllProducts?productPrice=50 - GET METHOD  
Jan-19-2023 10:06:17 [info] http://localhost:5001/api/product/getAllProducts?productPrice=20000 - GET METHOD  
Jan-19-2023 10:32:08 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-19-2023 10:39:02 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-19-2023 11:19:58 [info] http://localhost:5001/api/user/signup - POST METHOD  
Jan-19-2023 11:19:58 [error] Error: {reference: validationMiddleware, message: email is required, errorCode: 412, errors: [], error: email is required} 
Jan-19-2023 11:20:11 [info] http://localhost:5001/api/user/signup - POST METHOD  
Jan-19-2023 11:20:11 [error] Error: {reference: validationMiddleware, message: name is not allowed to be empty, errorCode: 412, errors: [], error: name is not allowed to be empty} 
Jan-19-2023 11:34:32 [info] http://localhost:5001/api/seller/signup - POST METHOD  
Jan-19-2023 11:34:32 [error] Error: {reference: validationMiddleware, message: name is required, errorCode: 412, errors: [], error: name is required} 
Jan-19-2023 11:52:03 [info] http://localhost:5001/api/user/signup - POST METHOD  
Jan-19-2023 11:52:03 [error] Error: {reference: validationMiddleware, message: name is not allowed to be empty, errorCode: 412, errors: [], error: name is not allowed to be empty} 
Jan-19-2023 11:52:43 [info] http://localhost:5001/api/user/signup - POST METHOD  
Jan-19-2023 11:52:43 [error] Error: {reference: validationMiddleware, message: name is not allowed to be empty, errorCode: 412, errors: [], error: name is not allowed to be empty} 
Jan-19-2023 11:54:06 [info] http://localhost:5001/api/user/signup - POST METHOD  
Jan-19-2023 11:54:06 [error] Error: {reference: validationMiddleware, message: name is not allowed to be empty, errorCode: 412, errors: [], error: name is not allowed to be empty} 
Jan-19-2023 12:00:43 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-19-2023 12:32:26 [info] http://localhost:5001/api/user/signup - POST METHOD  
Jan-19-2023 12:32:26 [error] Error: {reference: validationMiddleware, message: password with value Khufrgvr fails to match the required pattern: /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$/, errorCode: 412, errors: [], error: password with value Khufrgvr fails to match the required pattern: /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$/} 
Jan-19-2023 12:32:45 [info] http://localhost:5001/api/user/signup - POST METHOD  
Jan-19-2023 12:32:46 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of undefined (reading 'sendgrid')} 
Jan-19-2023 12:32:55 [info] http://localhost:5001/api/user/signup - POST METHOD  
Jan-19-2023 12:32:55 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of undefined (reading 'sendgrid')} 
Jan-19-2023 12:33:20 [info] http://localhost:5001/api/user/signup - POST METHOD  
Jan-19-2023 12:33:20 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of undefined (reading 'sendgrid')} 
Jan-19-2023 12:36:40 [info] http://localhost:5001/api/user/signup - POST METHOD  
Jan-19-2023 12:36:40 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of undefined (reading 'sendgrid')} 
Jan-19-2023 12:39:24 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-19-2023 12:40:17 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-19-2023 12:42:55 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-19-2023 12:42:58 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: File too large} 
Jan-19-2023 13:02:10 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-19-2023 13:02:13 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: File too large} 
Jan-19-2023 15:05:26 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-19-2023 15:05:26 [error] Error: {reference: POST /seller/signin, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of undefined (reading 'tokenExpirationTime')} 
Jan-19-2023 15:05:51 [info] http://localhost:5001/api/seller/signup - POST METHOD  
Jan-19-2023 15:05:51 [error] Error: {reference: signup, message: Seller already exists, errorCode: 409, errors: [], error: Seller already exists} 
Jan-19-2023 15:05:55 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-19-2023 15:05:55 [error] Error: {reference: POST /seller/signin, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of undefined (reading 'tokenExpirationTime')} 
Jan-19-2023 15:06:28 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-19-2023 15:08:29 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-19-2023 15:08:29 [error] Error: {reference: POST /seller/signin, message: Server Error!, errorCode: 500, errors: [], error: _id is not defined} 
Jan-19-2023 15:08:46 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-19-2023 15:08:46 [error] Error: {reference: POST /seller/signin, message: Server Error!, errorCode: 500, errors: [], error: id is not defined} 
Jan-19-2023 15:09:13 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-19-2023 15:09:13 [error] Error: {reference: POST /seller/signin, message: Server Error!, errorCode: 500, errors: [], error: _id is not defined} 
Jan-19-2023 15:10:12 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-19-2023 15:10:12 [error] Error: {reference: POST /seller/signin, message: Server Error!, errorCode: 500, errors: [], error: Cannot access 'seller' before initialization} 
Jan-19-2023 15:14:59 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-19-2023 15:14:59 [error] Error: {reference: POST /seller/signin, message: Server Error!, errorCode: 500, errors: [], error: _id is not defined} 
Jan-19-2023 15:16:08 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-19-2023 15:32:48 [info] http://localhost:5001/api/upload/uploadImage - POST METHOD  
Jan-19-2023 15:33:32 [info] http://localhost:5001/api/upload/upload/uploadImage - POST METHOD  
Jan-19-2023 15:34:49 [info] http://localhost:5001/api/upload/upload/uploadImage - POST METHOD  
Jan-19-2023 15:35:04 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-19-2023 15:37:01 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-19-2023 15:38:04 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-19-2023 15:38:39 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-19-2023 15:41:19 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-19-2023 15:41:22 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: Unexpected field} 
Jan-19-2023 15:41:46 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-19-2023 15:45:02 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-19-2023 15:45:02 [error] Error: {reference: validationMiddleware, message: totalQuantity must be a string, errorCode: 412, errors: [], error: totalQuantity must be a string} 
Jan-19-2023 15:45:49 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-19-2023 15:45:49 [error] Error: {reference: validationMiddleware, message: productPrice is required, errorCode: 412, errors: [], error: productPrice is required} 
Jan-19-2023 15:46:08 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-19-2023 15:46:08 [error] Error: {reference: validationMiddleware, message: location is not allowed, errorCode: 412, errors: [], error: location is not allowed} 
Jan-19-2023 15:51:30 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-19-2023 15:53:38 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-19-2023 15:54:16 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-19-2023 16:40:10 [info] http://localhost:5001/api/user/signup - POST METHOD  
Jan-19-2023 16:40:10 [error] Error: {reference: validationMiddleware, message: name is not allowed to be empty, errorCode: 412, errors: [], error: name is not allowed to be empty} 
Jan-19-2023 16:47:21 [info] http://localhost:5001/api/seller/signup - POST METHOD  
Jan-19-2023 16:47:37 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-19-2023 18:02:09 [info] http://localhost:5001/api/seller/signup - POST METHOD  
Jan-19-2023 18:02:10 [error] Error: {reference: signup, message: Seller already exists, errorCode: 409, errors: [], error: Seller already exists} 
Jan-20-2023 09:38:23 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-20-2023 09:39:16 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 09:39:16 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of null (reading '_id')} 
Jan-20-2023 09:40:19 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 09:40:19 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of null (reading '_id')} 
Jan-20-2023 09:41:50 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 09:41:50 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of null (reading '_id')} 
Jan-20-2023 09:42:09 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-20-2023 09:43:12 [info] http://localhost:5001/api/seller/signin - POST METHOD  
Jan-20-2023 09:43:20 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 09:43:20 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: Cannot read properties of null (reading '_id')} 
Jan-20-2023 09:44:47 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 09:44:47 [error] Error: {reference: POST /product/create, message: Server Error!, errorCode: 500, errors: [], error: this.splitPath is not a function} 
Jan-20-2023 09:46:11 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 09:49:50 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 09:55:15 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 09:56:03 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 09:56:38 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 09:58:36 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:01:40 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:04:06 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:05:38 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:05:38 [error] Error: {reference: Only Seller can create product, message: 400, errorCode: 500, errors: [], error: 400} 
Jan-20-2023 10:06:06 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:06:30 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:06:30 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: invalid signature} 
Jan-20-2023 10:13:14 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:13:29 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:13:29 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: invalid signature} 
Jan-20-2023 10:14:19 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:14:19 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: invalid signature} 
Jan-20-2023 10:14:55 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:14:55 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: invalid signature} 
Jan-20-2023 10:15:23 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:15:23 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: invalid signature} 
Jan-20-2023 10:18:26 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:18:26 [error] Error: {reference: authentication, message: token is missing, errorCode: 403, errors: [], error: token is missing} 
Jan-20-2023 10:19:19 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:19:27 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:19:40 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:20:40 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:20:41 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: Unexpected token  in JSON at position 31} 
Jan-20-2023 10:29:26 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:29:38 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:29:38 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: invalid token} 
Jan-20-2023 10:33:22 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:33:22 [error] Error: {reference: authentication, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-20-2023 10:33:51 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:33:51 [error] Error: {reference: authentication, message: token invalid, errorCode: 401, errors: [], error: token invalid} 
Jan-20-2023 10:34:04 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:34:04 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: decodedToken is not defined} 
Jan-20-2023 10:34:06 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 10:34:06 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: decodedToken is not defined} 
Jan-20-2023 10:35:04 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 11:12:26 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 11:12:33 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 11:13:32 [info] http://localhost:5001/api/product/getAllProducts - GET METHOD  
Jan-20-2023 11:22:04 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 11:22:53 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 11:24:21 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 11:24:25 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: File too large} 
Jan-20-2023 11:35:43 [info] http://localhost:5001/api/product/update/63c67955b8a15a8a8a3a7250 - PUT METHOD  
Jan-20-2023 11:35:43 [error] Error: {reference: update, message: No products with this Id or might be deleted, errorCode: 404, errors: [], error: No products with this Id or might be deleted} 
Jan-20-2023 11:41:10 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 11:41:14 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: File too large} 
Jan-20-2023 11:58:43 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 11:58:46 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: File too large} 
Jan-20-2023 12:23:20 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 12:23:23 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: File too large} 
Jan-20-2023 12:34:15 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 12:34:18 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: File too large} 
Jan-20-2023 12:34:40 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 12:35:32 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 12:39:26 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 12:42:13 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 12:42:29 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 12:45:06 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 12:45:35 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 12:48:50 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 12:49:49 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 12:55:34 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 13:02:21 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 13:02:38 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 13:02:54 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 13:15:42 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 13:18:55 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 15:00:34 [info] http://localhost:5001/api/product/create - POST METHOD  
Jan-20-2023 15:00:38 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 16:36:15 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 16:38:08 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 16:38:36 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 16:39:48 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 16:43:50 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 16:43:55 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: File too large} 
Jan-20-2023 16:45:42 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 16:45:47 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: File too large} 
Jan-20-2023 16:49:37 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 16:49:42 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: File too large} 
Jan-20-2023 16:52:22 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 16:52:27 [error] Error: {reference: LIMIT_FILE_SIZE, message: Invalid Body!, errorCode: 500, errors: [], error: Invalid Body!} 
Jan-20-2023 16:53:05 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 16:53:11 [error] Error: {reference: LIMIT_FILE_SIZE, message: Invalid Body!, errorCode: 500, errors: [], error: Invalid Body!} 
Jan-20-2023 16:53:39 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 16:53:44 [error] Error: {reference: LIMIT_FILE_SIZE, message: LIMIT_FILE_SIZE, errorCode: 500, errors: [], error: LIMIT_FILE_SIZE} 
Jan-20-2023 17:03:10 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 17:19:25 [info] http://localhost:5001/api/upload/upload - POST METHOD  
Jan-20-2023 17:19:58 [info] http://localhost:5001/api/upload/upload - POST METHOD  
=======
Jan-17-2023 18:38:24 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-17-2023 18:44:46 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-17-2023 19:08:01 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-17-2023 19:08:06 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-17-2023 19:08:09 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-17-2023 19:18:25 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-17-2023 19:24:17 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-17-2023 19:32:36 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-17-2023 19:32:45 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-17-2023 19:32:58 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-17-2023 19:33:38 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 10:44:23 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 11:33:54 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 11:33:54 [error] Error: {reference: [object Object], message: Invalid Body!, errorCode: 500, errors: [], error: Invalid Body!} 
Jan-18-2023 11:35:33 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 11:35:33 [error] Error: {reference: [object Object], message: Invalid Body!, errorCode: 500, errors: [], error: Invalid Body!} 
Jan-18-2023 11:36:17 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 11:36:17 [error] Error: {reference: [object Object], message: Invalid Body!, errorCode: 500, errors: [], error: Invalid Body!} 
Jan-18-2023 11:36:55 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 11:36:55 [error] Error: {reference: [object Object], message: Invalid Body!, errorCode: 500, errors: [], error: Invalid Body!} 
Jan-18-2023 11:36:57 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 11:36:57 [error] Error: {reference: [object Object], message: Invalid Body!, errorCode: 500, errors: [], error: Invalid Body!} 
Jan-18-2023 11:39:10 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 11:39:10 [error] Error: {reference: [object Object], message: Invalid Body!, errorCode: 500, errors: [], error: Invalid Body!} 
Jan-18-2023 11:47:37 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 11:47:37 [error] Error: {reference: POST /user/signup, message: Server Error!, errorCode: 500, errors: [], error: signup is not defined} 
Jan-18-2023 11:49:28 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 11:49:28 [error] Error: {reference: POST /user/signup, message: Server Error!, errorCode: 500, errors: [], error: signup is not defined} 
Jan-18-2023 11:49:45 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 11:49:45 [error] Error: {reference: POST /user/signup, message: Server Error!, errorCode: 500, errors: [], error: signup is not defined} 
Jan-18-2023 11:50:45 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 11:50:45 [error] Error: {reference: POST /user/signup, message: Server Error!, errorCode: 500, errors: [], error: reference is not defined} 
Jan-18-2023 11:51:29 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 11:51:53 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 11:52:42 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 11:52:42 [error] Error: {reference: POST /user/signup, message: Server Error!, errorCode: 500, errors: [], error: signup is not defined} 
Jan-18-2023 11:55:47 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 11:55:47 [error] Error: {reference: POST /user/signup, message: Server Error!, errorCode: 500, errors: [], error: signUp is not defined} 
Jan-18-2023 12:03:44 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 12:03:44 [error] Error: {reference: async (req, res, next) => {
  
  try {
    const reference = signUp;
    let { name, email, password } = req.body;
   

    if (!email||!name||!password) {
      throw new AppError(reference,"fields is required", 400)
    }
   
    const user = await User.findOne({
      email: email,

    });

    if (user && user.isVerified) throw new AppError({ signup,"message": "User already registered with the same Email id!" });
    if (!user) {
      password = util.generateHash(password)
      await User.create({
        name, email, password
      })
     
    }
    //otp generate

    const otp = util.generateOtp();

    


    console.log(otp);
    const hashedOtp = util.generateHash(otp)
    console.log(hashedOtp);

    await TransientUser.findOneAndUpdate({ email: email}, {$set:{otpHash: hashedOtp }},{upsert:true}).then(update=>{
      const payload = { to: email,otp}
    sendGrid.sendEmail(payload)
    res.status(200).send({ message: "Otp send successfully!", otp });
    })
    
  } catch (error) {
  error.reference = error.reference ? error.reference : "POST /user/signup";

    next(error)
   
  }
}, message: fields is required, errorCode: 400, errors: [], error: fields is required} 
Jan-18-2023 12:04:11 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 12:04:11 [error] Error: {reference: POST /user/signup, message: Server Error!, errorCode: 500, errors: [], error: signup is not defined} 
Jan-18-2023 12:04:28 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 12:04:28 [error] Error: {reference: async (req, res, next) => {
  
  try {
    const reference = signUp;
    let { name, email, password } = req.body;
   

    if (!email||!name||!password) {
      throw new AppError(reference,"fields is required", 400)
    }
   
    const user = await User.findOne({
      email: email,

    });

    if (user && user.isVerified) throw new AppError({ signup,"message": "User already registered with the same Email id!" });
    if (!user) {
      password = util.generateHash(password)
      await User.create({
        name, email, password
      })
     
    }
    //otp generate

    const otp = util.generateOtp();

    


    console.log(otp);
    const hashedOtp = util.generateHash(otp)
    console.log(hashedOtp);

    await TransientUser.findOneAndUpdate({ email: email}, {$set:{otpHash: hashedOtp }},{upsert:true}).then(update=>{
      const payload = { to: email,otp}
    sendGrid.sendEmail(payload)
    res.status(200).send({ message: "Otp send successfully!", otp });
    })
    
  } catch (error) {
  error.reference = error.reference ? error.reference : "POST /user/signup";

    next(error)
   
  }
}, message: fields is required, errorCode: 400, errors: [], error: fields is required} 
Jan-18-2023 12:05:13 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 12:05:13 [error] Error: {reference: async (req, res, next) => {
  
  try {
    // const reference = signUp;
    let { name, email, password } = req.body;
   

    if (!email||!name||!password) {
      throw new AppError(signUp,"fields is required", 400)
    }
   
    const user = await User.findOne({
      email: email,

    });

    if (user && user.isVerified) throw new AppError({ signup,"message": "User already registered with the same Email id!" });
    if (!user) {
      password = util.generateHash(password)
      await User.create({
        name, email, password
      })
     
    }
    //otp generate

    const otp = util.generateOtp();

    


    console.log(otp);
    const hashedOtp = util.generateHash(otp)
    console.log(hashedOtp);

    await TransientUser.findOneAndUpdate({ email: email}, {$set:{otpHash: hashedOtp }},{upsert:true}).then(update=>{
      const payload = { to: email,otp}
    sendGrid.sendEmail(payload)
    res.status(200).send({ message: "Otp send successfully!", otp });
    })
    
  } catch (error) {
  error.reference = error.reference ? error.reference : "POST /user/signup";

    next(error)
   
  }
}, message: fields is required, errorCode: 400, errors: [], error: fields is required} 
Jan-18-2023 12:07:15 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 12:07:15 [error] Error: {reference: async (req, res, next) => {
  
  try {
  
    let { name, email, password } = req.body;
   

    if (!email||!name||!password) {
      throw new AppError(signUp,"fields is required", 400)
    }
   
    const user = await User.findOne({
      email: email,

    });

    if (user && user.isVerified) throw new AppError( signUp, "User already registered with the same Email id!" ,409);
    if (!user) {
      password = util.generateHash(password)
      await User.create({
        name, email, password
      })
     
    }
    //otp generate

    const otp = util.generateOtp();

    


    console.log(otp);
    const hashedOtp = util.generateHash(otp)
    console.log(hashedOtp);

    await TransientUser.findOneAndUpdate({ email: email}, {$set:{otpHash: hashedOtp }},{upsert:true}).then(update=>{
      const payload = { to: email,otp}
    sendGrid.sendEmail(payload)
    res.status(200).send({ message: "Otp send successfully!", otp });
    })
    
  } catch (error) {
  error.reference = error.reference ? error.reference : "POST /user/signup";

    next(error)
   
  }
}, message: User already registered with the same Email id!, errorCode: 409, errors: [], error: User already registered with the same Email id!} 
Jan-18-2023 12:09:54 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 12:14:54 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 12:16:14 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 12:16:47 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 12:18:01 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 12:20:14 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 12:20:14 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: signinUSer is not defined} 
Jan-18-2023 12:20:53 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 12:20:53 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: signinUser is not defined} 
Jan-18-2023 12:21:29 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 12:21:29 [error] Error: {reference: async (req, res,next) => {
  const { email, password } = req.body
  // const hashedEmail = util.generateHash(email)
  // console.log("HE -->  ",hashedEmail)
  try {
    const signInUser = await User.findOne({ email });
    console.log(signInUser);
  if (!signInUser || !util.compareHash(password, signInUser.password))
    throw new AppError(signIn,"Incorrect email or password",403 )
  if (!signInUser) {
    throw new AppError(signIn,"Invalid Email or Password", 401)
  } else {
    console.log(signInUser._id)
    res.send({
      token: util.generateToken({id:signInUser._id}),
      
    })
  }
    
  } catch (error) {
    // error.reference = error.reference ? error.reference : "POST /user/signIn";
    next(error)
  };
  
}, message: Incorrect email or password, errorCode: 403, errors: [], error: Incorrect email or password} 
Jan-18-2023 12:21:52 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 12:22:04 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 12:23:04 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 12:23:53 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 12:24:09 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 12:25:26 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 12:28:58 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 12:29:43 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 12:31:35 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 12:39:22 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 12:39:22 [error] Error: {reference: async (req, res,next) => {
  const { email, password } = req.body
  try{// const hashedEmail = util.generateHash(email)
  // console.log("HE -->  ",hashedEmail)
  
    const signInUser = await User.findOne({email:email});
    console.log(signInUser);
    // if (!signInUser) {
    //   throw new AppError(signIn,"Invalid Email or Password", 401)}
  if (!signInUser || !util.compareHash(password, signInUser.password))
    throw new AppError(signIn,"Incorrect email or password",403 )
   else {
    console.log(signInUser._id)
    res.send({
      token: util.generateToken({id:signInUser._id}),
    })
}}catch(error){
  next(error)
}
}, message: Incorrect email or password, errorCode: 403, errors: [], error: Incorrect email or password} 
Jan-18-2023 12:40:25 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 12:40:25 [error] Error: {reference: async (req, res,next) => {
  const { email, password } = req.body
  try{
    const signInUser = await User.findOne({email:email});
    console.log(signInUser);
    if (!signInUser) {
      throw new AppError(signIn,"Invalid Email or Password", 401)}
  if (!signInUser || !util.compareHash(password, signInUser.password))
    throw new AppError(signIn,"Incorrect email or password",403 )
   else {
    console.log(signInUser._id)
    res.send({
      token: util.generateToken({id:signInUser._id}),
    })
}}catch(error){
  next(error)
}
}, message: Invalid Email or Password, errorCode: 401, errors: [], error: Invalid Email or Password} 
Jan-18-2023 12:50:20 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 12:50:32 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 12:50:38 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 12:53:55 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 12:54:15 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 12:54:32 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 12:55:27 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 12:55:39 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 12:57:16 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:04:20 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:05:52 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:06:28 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:07:37 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:08:19 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 13:08:23 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:09:00 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:10:55 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:11:11 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:12:46 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:14:54 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:16:04 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:16:18 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 13:16:21 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:16:49 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:17:24 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:19:34 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:20:58 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 13:20:58 [error] Error: {reference: async (req, res, next) => {
  const { email, password } = req.body
  try {
    const signInUser = await User.findOne({ email: email });
    console.log(signInUser);
    if (!signInUser) {
      throw new AppError(signIn, "Invalid Email", 401)
    }
    if (!signInUser || !util.compareHash(password, signInUser.password))
      throw new AppError(signIn, "Incorrect email or password", 403)
    else {
      console.log(signInUser._id)
      res.send({
        token: util.generateToken({ id: signInUser._id }),
      })
    }
  } catch (error) {
    next(error)
  }
}, message: Invalid Email, errorCode: 401, errors: [], error: Invalid Email} 
Jan-18-2023 13:21:07 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 13:21:07 [error] Error: {reference: async (req, res, next) => {
  const { email, password } = req.body
  try {
    const signInUser = await User.findOne({ email: email });
    console.log(signInUser);
    if (!signInUser) {
      throw new AppError(signIn, "Invalid Email", 401)
    }
    if (!signInUser || !util.compareHash(password, signInUser.password))
      throw new AppError(signIn, "Incorrect email or password", 403)
    else {
      console.log(signInUser._id)
      res.send({
        token: util.generateToken({ id: signInUser._id }),
      })
    }
  } catch (error) {
    next(error)
  }
}, message: Incorrect email or password, errorCode: 403, errors: [], error: Incorrect email or password} 
Jan-18-2023 13:35:16 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 13:35:16 [error] Error: {reference: async (req, res, next) => {
  const { email, password } = req.body
  try {
    const signInUser = await User.findOne({ email: email });
    console.log(signInUser);
    if (!signInUser) {
      throw new AppError(signIn, "Invalid Email", 401)
    }
    if (!signInUser || !util.compareHash(password, signInUser.password))
      throw new AppError(signIn, "Incorrect email or password", 403)
    else {
      console.log(signInUser._id)
      res.send({
        token: util.generateToken({ id: signInUser._id }),
      })
    }
  } catch (error) {
    next(error)
  }
}, message: Incorrect email or password, errorCode: 403, errors: [], error: Incorrect email or password} 
Jan-18-2023 13:35:43 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:38:13 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:38:34 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:38:34 [error] Error: {reference: POST /user/verifyOtp, message: Server Error!, errorCode: 500, errors: [], error: Illegal arguments: string, undefined} 
Jan-18-2023 13:39:14 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 13:39:19 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:39:19 [error] Error: {reference: POST /user/verifyOtp, message: Server Error!, errorCode: 500, errors: [], error: Illegal arguments: string, undefined} 
Jan-18-2023 13:39:21 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:39:21 [error] Error: {reference: POST /user/verifyOtp, message: Server Error!, errorCode: 500, errors: [], error: Illegal arguments: string, undefined} 
Jan-18-2023 13:41:08 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 13:41:31 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:41:31 [error] Error: {reference: POST /user/verifyOtp, message: Server Error!, errorCode: 500, errors: [], error: Illegal arguments: string, undefined} 
Jan-18-2023 13:42:36 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:42:36 [error] Error: {reference: async (req, res,next) => {
  try {
    let { email, otp } = req.body;


    console.log("email", email, "otpHash", otp)

    const transientUser = await TransientUser.findOne({ email })
      // .then(async transientUser => {
        console.log("transientUser", transientUser);
        // console.log("!util.compareHash(otpHash, transientUser.otp)",!util.compareHash(otp, transientUser.otpHash));
        if (!transientUser || !util.compareHash(otp, transientUser.otpHash)) throw new AppError(verifyOtp, "incorrect otp", 401)



        const transientUsers = await TransientUser.findOneAndDelete({ email: email })
        if (transientUsers) {
          let user = await User.findOneAndUpdate({ email }, { $set: { isVerified: true } }, { new: true })
          if (user) {
            const uuserId = uuidv4();
            let user2 = await User.findOneAndUpdate({ email }, { $set: { userId: uuserId } }, { upsert: true })
            if (user2) {
              console.log(user2, "user");
              if (user2 && user2.isVerified) {
                return res.status(200).send({ "message": "otp verified successfully" })
              }

              throw new AppError(verifyOtp, "something went wrong please try again", 400)
            }
          }
        }

        // return TransientUser.findOneAndDelete({ email: email }).then(value => {
        //   return User.findOneAndUpdate({ email }, { $set: { isVerified: true } }, { new: true })
        // }).then(data => {
        //   const uuserId = uuidv4();
        //   return User.findOneAndUpdate({ email }, { $set: { userId: uuserId } }, { upsert: true })
        // })

        //   .then(user => {
        //     console.log(user, "user");
        //     if (user && user.isVerified)
        //       return res.status(200).send({ "message": "otp verified successfully" })

        //     throw new AppError(verifyOtp, "something went wrong please try again", 400)

        //   })
        //   .catch(error)

      }
  catch (error) {
    error.reference = error.reference ? error.reference : "POST /user/verifyOtp";
    next(error);
  }


}, message: incorrect otp, errorCode: 401, errors: [], error: incorrect otp} 
Jan-18-2023 13:44:05 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:44:25 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:47:41 [info] http://localhost:3000/api/user/signup/verify - POST METHOD  
Jan-18-2023 13:47:41 [error] Error: {reference: async (req, res, next) => {
  try {
    let { email, otp } = req.body;


    console.log("email", email, "otpHash", otp)

    const transientUser = await TransientUser.findOne({ email })
    // .then(async transientUser => {
    console.log("transientUser", transientUser);
    // console.log("!util.compareHash(otpHash, transientUser.otp)",!util.compareHash(otp, transientUser.otpHash));
    if (!transientUser || !util.compareHash(otp, transientUser.otpHash)) throw new AppError(verifyOtp, "incorrect otp", 401)



    const transientUsers = await TransientUser.findOneAndDelete({ email: email })
    if (transientUsers) {
      let user = await User.findOneAndUpdate({ email }, { $set: { isVerified: true } }, { new: true })
      if (user) {
        const uuserId = uuidv4();
        let user2 = await User.findOneAndUpdate({ email }, { $set: { userId: uuserId } }, { upsert: true })
        if (user2) {
          console.log(user2, "user");
          if (user2 && user2.isVerified) {
            return res.status(200).send({ "message": "otp verified successfully" })
          }

          throw new AppError(verifyOtp, "something went wrong please try again", 400)
        }
      }
    }

  }
  catch (error) {
    error.reference = error.reference ? error.reference : "POST /user/verifyOtp";
    next(error);
  }


}, message: incorrect otp, errorCode: 401, errors: [], error: incorrect otp} 
Jan-18-2023 15:19:46 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:20:12 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:20:12 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: Query was already executed: User.findOne({ email: 'sunayraufdftela08@gmail.com' })} 
Jan-18-2023 15:21:31 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:21:31 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: Query was already executed: User.findOne({ email: 'sunayraufdftela08@gmail.com' })} 
Jan-18-2023 15:22:32 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:22:32 [error] Error: {reference: POST /user/forgotPassword, message: Server Error!, errorCode: 500, errors: [], error: Query was already executed: User.findOne({ email: 'sunayraufdftela08@gmail.com' })} 
Jan-18-2023 15:23:53 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:23:53 [error] Error: {reference: POST /user/forgotPassword, message: Server Error!, errorCode: 500, errors: [], error: Query was already executed: User.findOne({ email: 'sunayraufdftela08@gmail.com' })} 
Jan-18-2023 15:23:54 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:23:54 [error] Error: {reference: POST /user/forgotPassword, message: Server Error!, errorCode: 500, errors: [], error: Query was already executed: User.findOne({ email: 'sunayraufdftela08@gmail.com' })} 
Jan-18-2023 15:26:53 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:26:53 [error] Error: {reference: POST /user/forgotPassword, message: Server Error!, errorCode: 500, errors: [], error: Query was already executed: User.findOne({ email: 'sunayraufdftela08@gmail.com' })} 
Jan-18-2023 15:26:54 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:26:54 [error] Error: {reference: POST /user/forgotPassword, message: Server Error!, errorCode: 500, errors: [], error: Query was already executed: User.findOne({ email: 'sunayraufdftela08@gmail.com' })} 
Jan-18-2023 15:29:26 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:30:03 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:30:05 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:30:54 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:31:12 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:33:18 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:38:35 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:40:02 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:40:16 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:41:10 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:43:24 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:46:27 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:46:55 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:48:50 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:51:56 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 15:51:56 [error] Error: {reference: async (req, res, next) => {
  const { email, password } = req.body
  try {
    const signInUser = await User.findOne({ email: email });
    console.log(signInUser);
    if (!signInUser) {
      throw new AppError(signIn, "Invalid Email", 401)
    }
    if (!signInUser || !util.compareHash(password, signInUser.password))
      throw new AppError(signIn, "Incorrect email or password", 403)
    else {
      console.log(signInUser._id)
      res.send({
        token: util.generateToken({ id: signInUser._id }),
      })
    }
  } catch (error) {
    next(error)
  }
}, message: Incorrect email or password, errorCode: 403, errors: [], error: Incorrect email or password} 
Jan-18-2023 15:52:02 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:55:45 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:55:45 [error] Error: {reference: async (req, res,next) => {
  const { email } = req.body;
try {
  const user=  await User.findOne({ email: email })
  // console.log(user);
  if(!user){
    throw new AppError(forgetPassword,"User not found",401);
  }
  if(user){
    const resetToken = crypto.randomBytes(20).toString("hex");
    user.resetPasswordToken = resetToken;
    user.resetPasswordExpires = Date.now() + 3600000; // expires in 1 hour
    await user.save()
    const payload = { to: email, resetToken: resetToken, subject: "verification Email" }
        sendGrid.sendEmailForResetPassword(payload)
        res.status(200).send({ message: "Link send successfully!" });
  }
  
} catch (error) {
  next(error);
}

    // if (err) {
    //   res.status(500).json({ message: err });
    // } else if (!user) {
    //   throw new AppError(forgetPassword,"User not found",401);
    // } else {
      // // Generate and set a password reset token
      // const resetToken = crypto.randomBytes(20).toString("hex");
      // user.resetPasswordToken = resetToken;
      // user.resetPasswordExpires = Date.now() + 3600000; // expires in 1 hour
      // user.save((err) => {
      //   if (err) {
      //     res.status(500).json({ message: err });
      //   } else {
      //     // Send the password reset email
      //     const payload = { to: email, resetToken: resetToken, subject: "verification Email" }
      //     sendGrid.sendEmailForResetPassword(payload)
      //     res.status(200).send({ message: "Link send successfully!" });


      //   }
      // }
      // );
      // await user.save()
      // const payload = { to: email, resetToken: resetToken, subject: "verification Email" }
      //     sendGrid.sendEmailForResetPassword(payload)
      //     res.status(200).send({ message: "Link send successfully!" });

    
  }, message: User not found, errorCode: 401, errors: [], error: User not found} 
Jan-18-2023 15:57:43 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:57:43 [error] Error: {reference: async (req, res, next) => {
  const { email } = req.body;
  try {
    const user = await User.findOne({ email: email })
    // console.log(user);
    if (!user) {
      throw new AppError(forgetPassword, "User not found", 401);
    }
    if (user) {
      const resetToken = crypto.randomBytes(20).toString("hex");
      user.resetPasswordToken = resetToken;
      user.resetPasswordExpires = Date.now() + 3600000; // expires in 1 hour
      await user.save()
      const payload = { to: email, resetToken: resetToken, subject: "verification Email" }
      sendGrid.sendEmailForResetPassword(payload)
      res.status(200).send({ message: "Link send successfully!" });
    }

  } catch (error) {
    next(error);
  }
}, message: User not found, errorCode: 401, errors: [], error: User not found} 
Jan-18-2023 15:58:01 [info] http://localhost:3000/api/user/forgetPassword - POST METHOD  
Jan-18-2023 15:59:32 [info] http://localhost:3000/api/user/resetPassword/a3d1d9147a5ed197940ac2719dd66f1f55be0588 - POST METHOD  
Jan-18-2023 15:59:32 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: Query was already executed: User.findOne({ resetPasswordToken: 'a3d1d9147a5ed197940ac271...} 
Jan-18-2023 15:59:59 [info] http://localhost:3000/api/user/resetPassword/a3d1d9147a5ed197940ac2719dd66f1f55be0588 - POST METHOD  
Jan-18-2023 16:01:29 [info] http://localhost:3000/api/user/resetPassword/a3d1d9147a5ed197940ac2719dd66f1f55be0588 - POST METHOD  
Jan-18-2023 16:03:36 [info] http://localhost:3000/api/user/resetPassword/a3d1d9147a5ed197940ac2719dd66f1f55be0588 - POST METHOD  
Jan-18-2023 16:03:36 [error] Error: {reference: async (req, res,next) => {
  const { password } = req.body;

  let { token } = req.params;
  // console.log(User);
  // console.log(token);
  try {
  const user = await User.findOne({ resetPasswordToken: token })
  if (!user) {
        throw new AppError( resetPassword,"Password reset token is invalid or has expired.",401);
      } else {
        user.password = util.generateHash(password);
        user.resetPasswordToken = undefined;
        user.resetPasswordExpires = undefined;
        user.save((err) => {
          if (err) {
            res.status(500).json({ message: err });
          } else {
            res.status(200).json({ message: "Password reset successful." });
          }
        });
  
      }
    }
    
  catch (error) {
    next(error);
  }
  
}, message: Password reset token is invalid or has expired., errorCode: 401, errors: [], error: Password reset token is invalid or has expired.} 
Jan-18-2023 16:25:11 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 16:25:11 [error] Error: {reference: async (req, res, next) => {
  const { email, password } = req.body
  try {
    const signInUser = await User.findOne({ email: email });
    console.log(signInUser);
    if (!signInUser) {
      throw new AppError(signIn, "Invalid Email", 401)
    }
    if (!signInUser || !util.compareHash(password, signInUser.password))
      throw new AppError(signIn, "Incorrect email or password", 403)
    else {
      console.log(signInUser._id)
      res.send({
        token: util.generateToken({ id: signInUser._id }),
      })
    }
  } catch (error) {
    next(error)
  }
}, message: Incorrect email or password, errorCode: 403, errors: [], error: Incorrect email or password} 
Jan-18-2023 16:26:09 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 16:26:09 [error] Error: {reference: async (req, res, next) => {
  const { email, password } = req.body
  try {
    const signInUser = await User.findOne({ email: email });
    console.log(signInUser);
    if (!signInUser) {
      throw new AppError(signIn, "Invalid Email", 401)
    }
    if (!signInUser || !util.compareHash(password, signInUser.password))
      throw new AppError(signIn, "Incorrect email or password", 403)
    else {
      console.log(signInUser._id)
      res.send({
        token: util.generateToken({ id: signInUser._id }),
      })
    }
  } catch (error) {
    next(error)
  }
}, message: Incorrect email or password, errorCode: 403, errors: [], error: Incorrect email or password} 
Jan-18-2023 16:26:20 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 16:26:20 [error] Error: {reference: async (req, res, next) => {

  try {

    let { name, email, password } = req.body;


    if (!email || !name || !password) {
      throw new AppError(signUp, "fields is required", 400)
    }

    const user = await User.findOne({
      email: email,

    });

    if (user && user.isVerified) throw new AppError(signUp, "User already registered with the same Email id!", 409);
    if (!user) {
      password = util.generateHash(password)
      await User.create({
        name, email, password
      })

    }
    //otp generate

    const otp = util.generateOtp();




    console.log(otp);
    const hashedOtp = util.generateHash(otp)
    console.log(hashedOtp);

    await TransientUser.findOneAndUpdate({ email: email }, { $set: { otpHash: hashedOtp } }, { upsert: true }).then(update => {
      const payload = { to: email, otp }
      sendGrid.sendEmail(payload)
      res.status(200).send({ message: "Otp send successfully!", otp });
    })

  } catch (error) {
    error.reference = error.reference ? error.reference : "POST /user/signup";

    next(error)

  }
}, message: User already registered with the same Email id!, errorCode: 409, errors: [], error: User already registered with the same Email id!} 
Jan-18-2023 16:26:33 [info] http://localhost:3000/api/user/signin - POST METHOD  
Jan-18-2023 16:34:16 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: Unexpected token } in JSON at position 51} 
Jan-18-2023 16:34:20 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 16:34:20 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: Cannot read property 'id' of undefined} 
Jan-18-2023 16:34:22 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 16:34:22 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: Cannot read property 'id' of undefined} 
Jan-18-2023 16:36:50 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 16:37:28 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 16:38:13 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 16:38:29 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 16:39:10 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 16:39:41 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 16:40:10 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 16:40:24 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 16:42:27 [error] Error: {reference: Anonymous, message: Server Error!, errorCode: 500, errors: [], error: Unexpected token } in JSON at position 52} 
Jan-18-2023 16:42:53 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 16:44:10 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 16:46:00 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 16:47:07 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 16:48:17 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 16:50:31 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 17:00:37 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 17:00:39 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 17:00:44 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 17:01:19 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 17:01:43 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 17:01:43 [error] Error: {reference: async (req, res,next) => {
    // const sellerId = req.decodedToken.id
  try {
    const { productId ,categoryName} = req.body;
    const categoryFound = await CategoryModel.findOne({categoryName})
    if(categoryFound){
        throw new AppError(addCategory,"category already exist",409)
    }
    CategoryModel.create({ categoryName,
        productId })
        .then(result => {
            res.status(201).send({ message: "Category added Successfully", result: "result" })
        })
        .catch(err => {
            res.status(400).send({ message: "Failed", error: err })
        })
  } catch (error) {
    next(error);
  }
    
}, message: category already exist, errorCode: 409, errors: [], error: category already exist} 
Jan-18-2023 17:03:16 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 17:03:16 [error] Error: {reference: async (req, res,next) => {
    // const sellerId = req.decodedToken.id
  try {
    const { productId ,categoryName} = req.body;
    const categoryFound = await CategoryModel.findOne({categoryName})
    if(categoryFound){
        throw new AppError(addCategory,"category already exist",409)
    }
    CategoryModel.create({ categoryName,
        productId })
        .then(result => {
            res.status(201).send({ message: "Category added Successfully", result: "result" })
        })
        .catch(err => {
          throw new AppError(addCategory,"Failed",424)
        })
  } catch (error) {
    next(error);
  }
    
}, message: category already exist, errorCode: 409, errors: [], error: category already exist} 
Jan-18-2023 17:03:17 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 17:03:17 [error] Error: {reference: async (req, res,next) => {
    // const sellerId = req.decodedToken.id
  try {
    const { productId ,categoryName} = req.body;
    const categoryFound = await CategoryModel.findOne({categoryName})
    if(categoryFound){
        throw new AppError(addCategory,"category already exist",409)
    }
    CategoryModel.create({ categoryName,
        productId })
        .then(result => {
            res.status(201).send({ message: "Category added Successfully", result: "result" })
        })
        .catch(err => {
          throw new AppError(addCategory,"Failed",424)
        })
  } catch (error) {
    next(error);
  }
    
}, message: category already exist, errorCode: 409, errors: [], error: category already exist} 
Jan-18-2023 17:03:24 [info] http://localhost:3000/api/category/add - POST METHOD  
Jan-18-2023 17:03:24 [error] Error: {reference: async (req, res,next) => {
    // const sellerId = req.decodedToken.id
  try {
    const { productId ,categoryName} = req.body;
    const categoryFound = await CategoryModel.findOne({categoryName})
    if(categoryFound){
        throw new AppError(addCategory,"category already exist",409)
    }
    CategoryModel.create({ categoryName,
        productId })
        .then(result => {
            res.status(201).send({ message: "Category added Successfully", result: "result" })
        })
        .catch(err => {
          throw new AppError(addCategory,"Failed",424)
        })
  } catch (error) {
    next(error);
  }
    
}, message: category already exist, errorCode: 409, errors: [], error: category already exist} 
Jan-18-2023 17:06:07 [info] http://localhost:3000/api/category/remove - POST METHOD  
Jan-18-2023 17:20:36 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 17:20:36 [error] Error: {reference: async (req, res, next) => {

  try {

    let { name, email, password } = req.body;


    if (!email || !name || !password) {
      throw new AppError(signUp, "fields is required", 400)
    }

    const user = await User.findOne({
      email: email,

    });

    if (user && user.isVerified) throw new AppError(signUp, "User already registered with the same Email id!", 409);
    if (!user) {
      password = util.generateHash(password)
      await User.create({
        name, email, password
      })

    }
    //otp generate

    const otp = util.generateOtp();




    console.log(otp);
    const hashedOtp = util.generateHash(otp)
    console.log(hashedOtp);

    await TransientUser.findOneAndUpdate({ email: email }, { $set: { otpHash: hashedOtp } }, { upsert: true }).then(update => {
      const payload = { to: email, otp }
      sendGrid.sendEmail(payload)
      res.status(200).send({ message: "Otp send successfully!", otp });
    })

  } catch (error) {
    error.reference = error.reference ? error.reference : "POST /user/signup";

    next(error)

  }
}, message: fields is required, errorCode: 400, errors: [], error: fields is required} 
Jan-18-2023 17:21:13 [info] http://localhost:3000/api/user/signup - POST METHOD  
Jan-18-2023 17:21:13 [error] Error: {reference: signUp, message: fields is required, errorCode: 400, errors: [], error: fields is required} 
>>>>>>> 557d280aacd052fc24203928a5aa9f96db237af2
